# Create your views here.
# Create your views here.
from django.http import HttpResponse
from django.shortcuts import render_to_response
from django.template import RequestContext
def tal_conversion(request):
	if 'sequence' in request.POST and request.POST['sequence']:
		seq = request.POST['sequence']
	return render_to_response('tal_tools.html',{'seq':seq},context_instance=RequestContext(request))

def tal_tools(request):
	return render_to_response('tal_tools.html',context_instance=RequestContext(request))

def convert(request):
	errors = []
	# if "assemble" in request.POST:
	# if 'align' in request.POST:
	# 	reference = request.POST[]
	if 'sequence' in request.POST and request.POST['sequence']:
		seq = request.POST['sequence']
		seq_in = request.POST['sequence']
		# A_mon = request.POST['A']
		# T_mon = request.POST['T']
		# C_mon = request.POST['C']
		G_mon = request.POST['G']
		A_mon = "NI"
		T_mon = "NG"
		C_mon = "HD"
		# G_mon = "NN"
		backbone = request.POST['backbone']
		seq = str(seq)
		seq = seq.upper()
		length = len(seq)
		# if length == 16:
		# 	if len(seq) != 18:
		# 		errors.append('Sequence should be 18 bases long.')
		# if length == 18:
		# 	if len(seq) != 20:
		# 		errors.append('Sequence should be 20 bases long.')
		# if len(seq) != length:
		# 	len_error = 'Sequence should be %s bases long.' % (length)
		# 	errors.append(len_error)
		if seq[0] != 'T':
			errors.append('First base of target should be T.')
		if len(seq) < 2:
			errors.append('Target must be at least 2 bases in length.')
		if len(seq) > 26:
			errors.append('Target cannot be greater than 26 bases.')
		for c in seq:
			if c != 'A':
				if c != 'T':
					if c != 'C':
						if c!= 'G':
							errors.append('Sequence should be entered as a string of DNA bases.')
							break
		if len(errors) != 0:
			return render_to_response('tal_tools.html',{'errors':errors, 'seq_in':seq_in},context_instance=RequestContext(request))
		# if length == 16:
		# 	inter_seq = ['CGGACTTACG','CGGACTAACC','CGGGTTGACC','CGGCTTAACC','CGGCCTGACC','CGGACTGACA','CGGACTCACT','CGGCCTCACC','CGGATTAACC','CGGACTTACC','CGGGCTCACC','CGGTCTTACC','CGGCCTCACC','TGGGCTCACC','CGGTCTAACC','CGG']
		# 	repeats = seq[1:18]
		# if length == 18:
		# 	inter_seq = ['CGGACTTACC','CGGCCTTACC','CGGACTAACC','CGGGCTAACC','CGGCCTAACC','CGGACTTACC','CGGACTTACC','CGGCCTTACC','CGGACTAACC','CGGGCTAACC','CGGCCTAACC','CGGCCTTACC','CGGACTTACC','CGGCCTTACC','CGGACTAACC','CGGGCTAACC','CGGCCTAACC','CGG']
		# 	repeats = seq[1:20]
		# Circularizaiton primers V1 linkers:
		# Bsa = ['CGGACTTACA','CGGCCTTACC','TGGACTAACC']
		# linker = ['CGGACTTACC','CGGCCTTACC','CGGACTAACC','CGGGCTAACC','CGGCCTAACC','BsaI']
		# Circularization primers V2 linkers:
		Bsa = ['CTGTGCCAAGCGCACGGACTTACACCCGAACAA', 'CTGTGCCAAGCGCACGGCCTCACCCCAGAGCAG', 'TTATGTCAGGCCCATGGGCTCACCCCAGAGCAG', 'CTGTGCCAAGCGCACGGTCTAACCCCAGAGCAG', 'CTGTGCCAAGCGCACGGATTAACCCCAGAGCAG']
		linker = ['CTGTGCCAAGCGCACGGACTTACGCCAGAGCAG', 'CTGTGCCAAGCGCACGGACTAACCCCAGAGCAG', 'CTGTGCCAAGCGCACGGGTTGACCCCAGAGCAG', 'CTGTGCCAAGCGCACGGCCTGACCCCAGAGCAG', 'CTGTGCCAAGCGCACGGACTGACACCAGAGCAG', 'BsaI']
		inter = int(length) - 3
		a = 0
		n = 0
		i = 0
		inter_seq = []
		while n < inter:
			if linker[i] != "BsaI":
				inter_seq.append(linker[i])
				i += 1 
			else:
				i = 0
				inter_seq.append(Bsa[a])
				a += 1
			n += 1
		bb = seq[-1]
		end = length - 1
		repeats= seq[1:end]
		sequence = repeats.upper()
		bb = bb.upper()
		base_seq = []
		
		# The line below (helpfully called "seq") includes the last ~20 residues from the N term and the first 5 residues from the first repeat
		seq = 'CCAGTTGCTGAAGATCGCGAAGCGGGGAGGAGTCACGGCGGTCGAGGCGGTGCACGCGTGGCGCAATGCGCTCACGGGAGCACCCCTCAACCTGACCCCAGAGCAG'
		current_pos = 0
		for c in repeats:
			
			# The monomer sequences below appear to be the monomer without the first 5 AAs (L -> Q, inclusive) and
			# without the last 6 AAs (L -> G, inclusive)
			if c =='A':
				if A_mon == "NI":
					base_seq.append('GTCGTGGCAATTGCGAGCAACATCGGGGGAAAGCAGGCACTCGAAACCGTCCAGAGGTTGCTGCCTGTG')
			elif c =='T':
				if T_mon == "NG":
					base_seq.append('GTCGTGGCAATTGCGAGCAACGGAGGGGGAAAGCAGGCACTCGAAACCGTCCAGAGGTTGCTGCCTGTG')
			elif c == 'C':
				if C_mon == "HD":
					base_seq.append('GTCGTGGCAATTGCGAGCCATGACGGGGGAAAGCAGGCACTCGAAACCGTCCAGAGGTTGCTGCCTGTG')
			elif c =='G':
				# if G_mon == 'NK':
				# 	base_seq.append('GTCGTGGCAATTGCGAGCAACAAGGGGGGAAAGCAGGCACTCGAAACCGTCCAGAGGTTGCTGCCTGTG')
				if G_mon == 'NN':
					base_seq.append('GTCGTGGCAATTGCGAGCAACAACGGGGGAAAGCAGGCACTCGAAACCGTCCAGAGGTTGCTGCCTGTG')
			        # if G_mon == 'HN':
			        #     base_seq.append('CCAGAGCAGGTCGTGGCAATTGCGAGCCATAACGGGGGAAAGCAGGCACTCGAAACCGTCCAGAGGTTGCTGCCTGTGCTGTGCCAAGCGCA')
				if G_mon == "NH":
					base_seq.append('GTCGTGGCAATTGCGAGCAACCACGGGGGAAAGCAGGCACTCGAAACCGTCCAGAGGTTGCTGCCTGTG')
			    # else:
			    # 	errors.append('Sequence should only consist of DNA bases.')
			    # 	return render_to_response('tal_conversion.html',{'errors':errors})
		mons = len(base_seq)
		inter_seq.append('')
		for n in range(mons):
		    current_seq = base_seq[n] + inter_seq[n]
		    seq = seq + current_seq
		    
		# This is where the 0.5 repeat is added
		if backbone == 'TALE':   # If TF backbone, use the following 0.5 repeats
			if bb == 'A':
			    halfr = 'CTGTGCCAAGCGCACGGACTCACGCCTGAGCAGGTAGTGGCTATTGCATCCAATATCGGGGGCAGACCCGCACTGGAG'
			elif bb == 'T':
				halfr = 'CTGTGCCAAGCGCACGGACTCACGCCTGAGCAGGTAGTGGCTATTGCATCCAATGGCGGGGGCAGACCCGCACTGGAG'
			elif bb == 'C':
				halfr = 'CTGTGCCAAGCGCACGGACTCACGCCTGAGCAGGTAGTGGCTATTGCATCCCATGACGGGGGCAGACCCGCACTGGAG'
			elif bb == 'G':
				halfr = 'CTGTGCCAAGCGCACGGACTCACGCCTGAGCAGGTAGTGGCTATTGCATCCAATAACGGGGGCAGACCCGCACTGGAG'
			elif bb == 'NS':
				halfr = 'ACTCACGCCTGAGCAGGTAGTGGCTATTGCATCCAATTCCGGGGGCAGACCCGCACTGGAG'
		
		if backbone == 'TALEN':   # If TALEN backbone, use the following 0.5 repeats
			if bb == 'A':
				halfr = 'CTGTGCCAAGCGCACGGACTCACGCCTGAGCAGGTAGTGGCTATTGCATCCAACATCGGGGGCAGACCCGCACTGGAG'
			elif bb == 'T':
				halfr = 'CTGTGCCAAGCGCACGGACTCACGCCTGAGCAGGTAGTGGCTATTGCATCCAACGGAGGGGGCAGACCCGCACTGGAG'
			elif bb == 'C':
				halfr = 'CTGTGCCAAGCGCACGGACTCACGCCTGAGCAGGTAGTGGCTATTGCATCCCATGACGGGGGCAGACCCGCACTGGAG'
			elif bb == 'G':
				halfr = 'CTGTGCCAAGCGCACGGACTCACGCCTGAGCAGGTAGTGGCTATTGCATCCAACAACGGGGGCAGACCCGCACTGGAG'
			elif bb == 'NS':
				halfr = 'ACTCACGCCTGAGCAGGTAGTGGCTATTGCATCCAATTCCGGGGGCAGACCCGCACTGGAG'
		
		# Concatenate the existing sequence with the apporpriate half-repeat and then first 7.5 residues of the C term
		final = seq + halfr + 'TCAATCGTGGCCCAGCTTTCGAGGC'
		
		if "genbank" in request.POST:
			response = HttpResponse(mimetype='text/plain')
			if backbone == "TALE":
				start = "CTCATGACCAAAATCCCTTAACGTGAGTTACGCGCGCGTCGTTCCACTGAGCGTCAGACCCCGTAGAAAAGATCAAAGGATCTTCTTGAGATCCTTTTTTTCTGCGCGTAATCTGCTGCTTGCAAACAAAAAAACCACCGCTACCAGCGGTGGTTTGTTTGCCGGATCAAGAGCTACCAACTCTTTTTCCGAAGGTAACTGGCTTCAGCAGAGCGCAGATACCAAATACTGTTCTTCTAGTGTAGCCGTAGTTAGCCCACCACTTCAAGAACTCTGTAGCACCGCCTACATACCTCGCTCTGCTAATCCTGTTACCAGTGGCTGCTGCCAGTGGCGATAAGTCGTGTCTTACCGGGTTGGACTCAAGACGATAGTTACCGGATAAGGCGCAGCGGTCGGGCTGAACGGGGGGTTCGTGCACACAGCCCAGCTTGGAGCGAACGACCTACACCGAACTGAGATACCTACAGCGTGAGCTATGAGAAAGCGCCACGCTTCCCGAAGGGAGAAAGGCGGACAGGTATCCGGTAAGCGGCAGGGTCGGAACAGGAGAGCGCACGAGGGAGCTTCCAGGGGGAAACGCCTGGTATCTTTATAGTCCTGTCGGGTTTCGCCACCTCTGACTTGAGCGTCGATTTTTGTGATGCTCGTCAGGGGGGCGGAGCCTATGGAAAAACGCCAGCAACGCGGCCTTTTTACGGTTCCTGGCCTTTTGCTGGCCTTTTGCTCACATGTTCTTTCCTGCGTTATCCCCTGATTCTGTGGATAACCGTATTACCGCCTTTGAGTGAGCTGATACCGCTCGCCGCAGCCGAACGACCGAGCGCAGCGAGTCAGTGAGCGAGGAAGCGGAAGGCGAGAGTAGGGAACTGCCAGGCATCAAACTAAGCAGAAGGCCCCTGACGGATGGCCTTTTTGCGTTTCTACAAACTCTTTCTGTGTTGTAAAACGACGGCCAGTCTTAAGCTCGGGCCCCCTGGGCGGTTCTGATAACGAGTAATCGTTAATCCGCAAATAACGTAAAAACCCGCTTCGGCGGGTTTTTTTATGGGGGGAGTTTAGGGAAAGAGCATTTGTCAGAATATTTAAGGGCGCCTGTCACTTTGCTTGATATATGAGAATTATTTAACCTTATAAATGAGAAAAAAGCAACGCACTTTAAATAAGATACGTTGCTTTTTCGATTGATGAACACCTATAATTAAACTATTCATCTATTATTTATGATTTTTTGTATATACAATATTTCTAGTTTGTTAAAGAGAATTAAGAAAATAAATCTCGAAAATAATAAAGGGAAAATCAGTTTTTGATATCAAAATTATACATGTCAACGATAATACAAAATATAATACAAACTATAAGATGTTATCAGTATTTATTATCATTTAGAATAAATTTTGTGTCGCCCTTAATTGTGAGCGGATAACAATTACGAGCTTCATGCACAGTGGCGTTGACATTGATTATTGACTAGTTATTAATAGTAATCAATTACGGGGTCATTAGTTCATAGCCCATATATGGAGTTCCGCGTTACATAACTTACGGTAAATGGCCCGCCTGGCTGACCGCCCAACGACCCCCGCCCATTGACGTCAATAATGACGTATGTTCCCATAGTAACGCCAATAGGGACTTTCCATTGACGTCAATGGGTGGAGTATTTACGGTAAACTGCCCACTTGGCAGTACATCAAGTGTATCATATGCCAAGTACGCCCCCTATTGACGTCAATGACGGTAAATGGCCCGCCTGGCATTATGCCCAGTACATGACCTTATGGGACTTTCCTACTTGGCAGTACATCTACGTATTAGTCATCGCTATTACCATGGTGATGCGGTTTTGGCAGTACATCAATGGGCGTGGATAGCGGTTTGACTCACGGGGATTTCCAAGTCTCCACCCCATTGACGTCAATGGGAGTTTGTTTTGGCACCAAAATCAACGGGACTTTCCAAAATGTCGTAACAACTCCGCCCCATTGACGCAAATGGGCGGTAGGCGTGTACGGTGGGAGGTCTATATAAGCAGAGCTCTCTGGCTAACTAGAGAACCCACTGCTTACTGGCTTATCGAAATTAATACGACTCACTATAGGGGCGTACGGCCACCATGTCGCGGACCCGGCTCCCTTCCCCACCCGCACCCAGCCCAGCGTTTTCGGCCGACTCGTTCTCAGACCTGCTTAGGCAGTTCGACCCCTCACTGTTTAACACATCGTTGTTCGACTCCCTTCCTCCGTTTGGGGCGCACCATACGGAGGCGGCCACCGGGGAGTGGGATGAGGTGCAGTCGGGATTGAGAGCTGCGGATGCACCACCCCCAACCATGCGGGTGGCCGTCACCGCTGCCCGACCGCCGAGGGCGAAGCCCGCACCAAGGCGGAGGGCAGCGCAACCGTCCGACGCAAGCCCCGCAGCGCAAGTAGATTTGAGAACTTTGGGATATTCACAGCAGCAGCAGGAAAAGATCAAGCCCAAAGTGAGGTCGACAGTCGCGCAGCATCACGAAGCGCTGGTGGGTCATGGGTTTACACATGCCCACATCGTAGCCTTGTCGCAGCACCCTGCAGCCCTTGGCACGGTCGCCGTCAAGTACCAGGACATGATTGCGGCGTTGCCGGAAGCCACACATGAGGCGATCGTCGGTGTGGGGAAACAGTGGAGCGGAGCCCGAGCGCTTGAGGCCCTGTTGACGGTCGCGGGAGAGCTGAGAGGGCCTCCCCTTCAGCTGGACACGGG"
				end = 'CGGACCCCGCGCTGGCCGCACTCACTAATGATCATCTTGTAGCGCTGGCCTGCCTCGGCGGACGACCCGCCTTGGATGCGGTGAAGAAGGGGCTCCCGCACGCGCCTGCATTGATTAAGCGGACCAACAGAAGGATTCCCGAGAGGACATCACATCGAGTGGCAGATCACGCGCAAGTGGTCCGCGTGCTCGGATTCTTCCAGTGTCACTCCCACCCCGCACAAGCGTTCGATGACGCCATGACTCAATTTGGTATGTCGAGACACGGACTGCTGCAGCTCTTTCGTAGAGTCGGTGTCACAGAACTCGAGGCCCGCTCGGGCACACTGCCTCCCGCCTCCCAGCGGTGGGACAGGATTCTCCAAGCGAGCGGTATGAAACGCGCGAAGCCTTCACCTACGTCAACTCAGACACCTGACCAGGCGAGCCTTCATGCGTTCGCAGACTCGCTGGAGAGGGATTTGGACGCGCCCTCGCCCATGCATGAAGGGGACCAAACTCGCGCGTCAGCTAGCCCCAAGAAGAAGAGAAAGGTGGAGGCCAGCGGTTCCGGACGGGCTGACGCATTGGACGATTTTGATCTGGATATGCTGGGAAGTGACGCCCTCGATGATTTTGACCTTGACATGCTTGGTTCGGATGCCCTTGATGACTTTGACCTCGACATGCTCGGCAGTGACGCCCTTGATGATTTCGACCTGGACATGCTGATTAACTCTAGAGGCAGTGGAGAGGGCAGAGGAAGTCTGCTAACATGCGGTGACGTCGAGGAGAATCCTGGCCCAGTGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGTGCCCATCCTGGTCGAGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCTGACCCTGAAGTTCATCTGCACCACCGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCCTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCCGACCACATGAAGCAGCACGACTTCTTCAAGTCCGCCATGCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGGCAACTACAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACTACAACAGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAACACCCCCATCGGCGACGGCCCCGTGCTGCTGCCCGACAACCACTACCTGAGCACCCAGTCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGCCGGGATCACTCTCGGCATGGACGAGCTGTACAAGTAAGAATTCAAAATCAGCCTCGACTGTGCCTTCTAGTTGCCAGCCATCTGTTGTTTGCCCCTCCCCCGTGCCTTCCTTGACCCTGGAAGGTGCCACTCCCACTGTCCTTTCCTAATAAAATGAGGAAATTGCATCACAACACTCAACCCTATCTCGGTCTATTCTTTTGATTTATAAGGGATTTTGCCGATTTCGGCCTATTGGTTAAAAAATGAGCTGATTTAACAAAAATTTAACGCGAATTAATTCTGTGGAATGTGTGTCAGTTAGGGTGTGGAAAGTCCCCAGGCTCCCCAGCAGGCAGAAGTATGCAAAGCATGCATCTCAATTAGTCAGCAACCAGGTGTGGAAAGTCCCCAGGCTCCCCAGCAGGCAGAAGTATGCAAAGCATGCATCTCAATTAGTCAGCAACCATAGTCCCGCCCCTAACTCCGCCCATCCCGCCCCTAACTCCGCCCAGTTCCGCCCATTCTCCGCCCCATGGCTGACTAATTTTTTTTATTTATGCAGAGGCCGAGGCCGCCTCTGCCTCTGAGCTATTCCAGAAGTAGTGAGGAGGCTTTTTTGGAGGCCTAGGCTTTTGCAAAAAGCTCCCGGGAGCTTGTATATCCATTTTCGGATCTGATCAGCACGTGATGAAAAAGCCTGAACTCACCGCGACGTCTGTCGAGAAGTTTCTGATCGAAAAGTTCGACAGCGTCTCCGACCTGATGCAGCTCTCGGAGGGCGAAGAATCTCGTGCTTTCAGCTTCGATGTAGGAGGGCGTGGATATGTCCTGCGGGTAAATAGCTGCGCCGATGGTTTCTACAAAGATCGTTATGTTTATCGGCACTTTGCATCGGCCGCGCTCCCGATTCCGGAAGTGCTTGACATTGGGGAATTCAGCGAGAGCCTGACCTATTGCATCTCCCGCCGTGCACAGGGTGTCACGTTGCAAGACCTGCCTGAAACCGAACTGCCCGCTGTTCTGCAGCCGGTCGCGGAGGCCATGGATGCGATCGCTGCGGCCGATCTTAGCCAGACGAGCGGGTTCGGCCCATTCGGACCGCAAGGAATCGGTCAATACACTACATGGCGTGATTTCATATGCGCGATTGCTGATCCCCATGTGTATCACTGGCAAACTGTGATGGACGACACCGTCAGTGCGTCCGTCGCGCAGGCTCTCGATGAGCTGATGCTTTGGGCCGAGGACTGCCCCGAAGTCCGGCACCTCGTGCACGCGGATTTCGGCTCCAACAATGTCCTGACGGACAATGGCCGCATAACAGCGGTCATTGACTGGAGCGAGGCGATGTTCGGGGATTCCCAATACGAGGTCGCCAACATCTTCTTCTGGAGGCCGTGGTTGGCTTGTATGGAGCAGCAGACGCGCTACTTCGAGCGGAGGCATCCGGAGCTTGCAGGATCGCCGCGGCTCCGGGCGTATATGCTCCGCATTGGTCTTGACCAACTCTATCAGAGCTTGGTTGACGGCAATTTCGATGATGCAGCTTGGGCGCAGGGTCGATGCGACGCAATCGTCCGATCCGGAGCCGGGACTGTCGGGCGTACACAAATCGCCCGCAGAAGCGCGGCCGTCTGGACCGATGGCTGTGTAGAAGTACTCGCCGATAGTGGAAACCGACGCCCCAGCACTCGTCCGAGGGCAAAGGAATAGCACGTGCTACGAGATTTCGATTCCACCGCCGCCTTCTATGAAAGGTTGGGCTTCGGAATCGTTTTCCGGGACGCCGGCTGGATGATCCTCCAGCGCGGGGATCTCATGCTGGAGTTCTTCGCCCACCCCAACTTGTTTATTGCAGCTTATAATGGTTACAAATAAAGCAATAGCATCACAAATTTCACAAATAAAGCATTTTTTTCACTGCATTCTAGTTGTGGTTTGTCCAAACTCATCAATGTATCTTATCATGTCTGTATACCGTCGACCTCTAGCTAGAGCTTGGCGTAATCATGGTCATTACCAATGCTTAATCAGTGAGGCACCTATCTCAGCGATCTGTCTATTTCGTTCATCCATAGTTGCCTGACTCCCCGTCGTGTAGATAACTACGATACGGGAGGGCTTACCATCTGGCCCCAGCGCTGCGATGATACCGCGAGAACCACGCTCACCGGCTCCGGATTTATCAGCAATAAACCAGCCAGCCGGAAGGGCCGAGCGCAGAAGTGGTCCTGCAACTTTATCCGCCTCCATCCAGTCTATTAATTGTTGCCGGGAAGCTAGAGTAAGTAGTTCGCCAGTTAATAGTTTGCGCAACGTTGTTGCCATCGCTACAGGCATCGTGGTGTCACGCTCGTCGTTTGGTATGGCTTCATTCAGCTCCGGTTCCCAACGATCAAGGCGAGTTACATGATCCCCCATGTTGTGCAAAAAAGCGGTTAGCTCCTTCGGTCCTCCGATCGTTGTCAGAAGTAAGTTGGCCGCAGTGTTATCACTCATGGTTATGGCAGCACTGCATAATTCTCTTACTGTCATGCCATCCGTAAGATGCTTTTCTGTGACTGGTGAGTACTCAACCAAGTCATTCTGAGAATAGTGTATGCGGCGACCGAGTTGCTCTTGCCCGGCGTCAATACGGGATAATACCGCGCCACATAGCAGAACTTTAAAAGTGCTCATCATTGGAAAACGTTCTTCGGGGCGAAAACTCTCAAGGATCTTACCGCTGTTGAGATCCAGTTCGATGTAACCCACTCGTGCACCCAACTGATCTTCAGCATCTTTTACTTTCACCAGCGTTTCTGGGTGAGCAAAAACAGGAAGGCAAAATGCCGCAAAAAAGGGAATAAGGGCGACACGGAAATGTTGAATACTCATATTCTTCCTTTTTCAATATTATTGAAGCATTTATCAGGGTTATTGTCTCATGAGCGGATACATATTTGAATGTATTTAGAAAAATAAACAAATAGGGGTCAGTGTTACAACCAATTAACCAATTCTGAACATTATCGCGAGCCCATTTATACCTGAATATGGCTCATAACACCCCTTG'
				bbType = 'TALETF'
			elif backbone == "TALEN":
				start = 'CTCATGACCAAAATCCCTTAACGTGAGTTACGCGCGCGTCGTTCCACTGAGCGTCAGACCCCGTAGAAAAGATCAAAGGATCTTCTTGAGATCCTTTTTTTCTGCGCGTAATCTGCTGCTTGCAAACAAAAAAACCACCGCTACCAGCGGTGGTTTGTTTGCCGGATCAAGAGCTACCAACTCTTTTTCCGAAGGTAACTGGCTTCAGCAGAGCGCAGATACCAAATACTGTTCTTCTAGTGTAGCCGTAGTTAGCCCACCACTTCAAGAACTCTGTAGCACCGCCTACATACCTCGCTCTGCTAATCCTGTTACCAGTGGCTGCTGCCAGTGGCGATAAGTCGTGTCTTACCGGGTTGGACTCAAGACGATAGTTACCGGATAAGGCGCAGCGGTCGGGCTGAACGGGGGGTTCGTGCACACAGCCCAGCTTGGAGCGAACGACCTACACCGAACTGAGATACCTACAGCGTGAGCTATGAGAAAGCGCCACGCTTCCCGAAGGGAGAAAGGCGGACAGGTATCCGGTAAGCGGCAGGGTCGGAACAGGAGAGCGCACGAGGGAGCTTCCAGGGGGAAACGCCTGGTATCTTTATAGTCCTGTCGGGTTTCGCCACCTCTGACTTGAGCGTCGATTTTTGTGATGCTCGTCAGGGGGGCGGAGCCTATGGAAAAACGCCAGCAACGCGGCCTTTTTACGGTTCCTGGCCTTTTGCTGGCCTTTTGCTCACATGTTCTTTCCTGCGTTATCCCCTGATTCTGTGGATAACCGTATTACCGCCTTTGAGTGAGCTGATACCGCTCGCCGCAGCCGAACGACCGAGCGCAGCGAGTCAGTGAGCGAGGAAGCGGAAGGCGAGAGTAGGGAACTGCCAGGCATCAAACTAAGCAGAAGGCCCCTGACGGATGGCCTTTTTGCGTTTCTACAAACTCTTTCTGTGTTGTAAAACGACGGCCAGTCTTAAGCTCGGGCCCCCTGGGCGGTTCTGATAACGAGTAATCGTTAATCCGCAAATAACGTAAAAACCCGCTTCGGCGGGTTTTTTTATGGGGGGAGTTTAGGGAAAGAGCATTTGTCAGAATATTTAAGGGCGCCTGTCACTTTGCTTGATATATGAGAATTATTTAACCTTATAAATGAGAAAAAAGCAACGCACTTTAAATAAGATACGTTGCTTTTTCGATTGATGAACACCTATAATTAAACTATTCATCTATTATTTATGATTTTTTGTATATACAATATTTCTAGTTTGTTAAAGAGAATTAAGAAAATAAATCTCGAAAATAATAAAGGGAAAATCAGTTTTTGATATCAAAATTATACATGTCAACGATAATACAAAATATAATACAAACTATAAGATGTTATCAGTATTTATTATCATTTAGAATAAATTTTGTGTCGCCCTTAATTGTGAGCGGATAACAATTACGAGCTTCATGCACAGTGGCGTTGACATTGATTATTGACTAGTTATTAATAGTAATCAATTACGGGGTCATTAGTTCATAGCCCATATATGGAGTTCCGCGTTACATAACTTACGGTAAATGGCCCGCCTGGCTGACCGCCCAACGACCCCCGCCCATTGACGTCAATAATGACGTATGTTCCCATAGTAACGCCAATAGGGACTTTCCATTGACGTCAATGGGTGGAGTATTTACGGTAAACTGCCCACTTGGCAGTACATCAAGTGTATCATATGCCAAGTACGCCCCCTATTGACGTCAATGACGGTAAATGGCCCGCCTGGCATTATGCCCAGTACATGACCTTATGGGACTTTCCTACTTGGCAGTACATCTACGTATTAGTCATCGCTATTACCATGGTGATGCGGTTTTGGCAGTACATCAATGGGCGTGGATAGCGGTTTGACTCACGGGGATTTCCAAGTCTCCACCCCATTGACGTCAATGGGAGTTTGTTTTGGCACCAAAATCAACGGGACTTTCCAAAATGTCGTAACAACTCCGCCCCATTGACGCAAATGGGCGGTAGGCGTGTACGGTGGGAGGTCTATATAAGCAGAGCTCTCTGGCTAACTAGAGAACCCACTGCTTACTGGCTTATCGAAATTAATACGACTCACTATAGGGGCCACCATGGACTATAAGGACCACGACGGAGACTACAAGGATCATGATATTGATTACAAAGACGATGACGATAAGATGGCCCCAAAGAAGAAGCGGAAGGTCGGTATCCACGGAGTCCCAGCAGCCGTAGATTTGAGAACTTTGGGATATTCACAGCAGCAGCAGGAAAAGATCAAGCCCAAAGTGAGGTCGACAGTCGCGCAGCATCACGAAGCGCTGGTGGGTCATGGGTTTACACATGCCCACATCGTAGCCTTGTCGCAGCACCCTGCAGCCCTTGGCACGGTCGCCGTCAAGTACCAGGACATGATTGCGGCGTTGCCGGAAGCCACACATGAGGCGATCGTCGGTGTGGGGAAACAGTGGAGCGGAGCCCGAGCGCTTGAGGCCCTGTTGACGGTCGCGGGAGAGCTGAGAGGGCCTCCCCTTCAGCTGGACACGGG'
				end = 'CGGACCCCGCGCTGGCCGCACTCACTAATGATCATCTTGTAGCGCTGGCCTGCCTCGGCGGACGACCCGCCTTGGATGCGGTGAAGAAGGGGCTCCCGCACGCGCCTGCATTGATTAAGCGGACCAACAGAAGGATTCCCGAGAGGACATCACATCGAGTGGCAGGTTCCCAACTCGTGAAGAGTGAACTTGAGGAGAAAAAGTCGGAGCTGCGGCACAAATTGAAATACGTACCGCATGAATACATCGAACTTATCGAAATTGCTAGGAACTCGACTCAAGACAGAATCCTTGAGATGAAGGTAATGGAGTTCTTTATGAAGGTTTATGGATACCGAGGGAAGCATCTCGGTGGATCACGAAAACCCGACGGAGCAATCTATACGGTGGGGAGCCCGATTGATTACGGAGTGATCGTCGACACGAAAGCCTACAGCGGTGGGTACAATCTTCCCATCGGGCAGGCAGATGAGATGCAACGTTATGTCGAAGAAAATCAGACCAGGAACAAACACATCAATCCAAATGAGTGGTGGAAAGTGTATCCTTCATCAGTGACCGAGTTTAAGTTTTTGTTTGTCTCTGGGCATTTCAAAGGCAACTATAAGGCCCAGCTCACACGGTTGAATCACATTACGAACTGCAATGGTGCGGTTTTGTCCGTAGAGGAACTGCTCATTGGTGGAGAAATGATCAAAGCGGGAACTCTGACACTGGAAGAAGTCAGACGCAAGTTTAACAATGGCGAGATCAATTTCCGCTCATAAAAAATCAGCCTCGACTGTGCCTTCTAGTTGCCAGCCATCTGTTGTTTGCCCCTCCCCCGTGCCTTCCTTGACCCTGGAAGGTGCCACTCCCACTGTCCTTTCCTAATAAAATGAGGAAATTGCATCACAACACTCAACCCTATCTCGGTCTATTCTTTTGATTTATAAGGGATTTTGCCGATTTCGGCCTATTGGTTAAAAAATGAGCTGATTTAACAAAAATTTAACGCGAATTAATTCTGTGGAATGTGTGTCAGTTAGGGTGTGGAAAGTCCCCAGGCTCCCCAGCAGGCAGAAGTATGCAAAGCATGCATCTCAATTAGTCAGCAACCAGGTGTGGAAAGTCCCCAGGCTCCCCAGCAGGCAGAAGTATGCAAAGCATGCATCTCAATTAGTCAGCAACCATAGTCCCGCCCCTAACTCCGCCCATCCCGCCCCTAACTCCGCCCAGTTCCGCCCATTCTCCGCCCCATGGCTGACTAATTTTTTTTATTTATGCAGAGGCCGAGGCCGCCTCTGCCTCTGAGCTATTCCAGAAGTAGTGAGGAGGCTTTTTTGGAGGCCTAGGCTTTTGCAAAAAGCTCCCGGGAGCTTGTATATCCATTTTCGGATCTGATCAGCACGTGATGAAAAAGCCTGAACTCACCGCGACGTCTGTCGAGAAGTTTCTGATCGAAAAGTTCGACAGCGTCTCCGACCTGATGCAGCTCTCGGAGGGCGAAGAATCTCGTGCTTTCAGCTTCGATGTAGGAGGGCGTGGATATGTCCTGCGGGTAAATAGCTGCGCCGATGGTTTCTACAAAGATCGTTATGTTTATCGGCACTTTGCATCGGCCGCGCTCCCGATTCCGGAAGTGCTTGACATTGGGGAATTCAGCGAGAGCCTGACCTATTGCATCTCCCGCCGTGCACAGGGTGTCACGTTGCAAGACCTGCCTGAAACCGAACTGCCCGCTGTTCTGCAGCCGGTCGCGGAGGCCATGGATGCGATCGCTGCGGCCGATCTTAGCCAGACGAGCGGGTTCGGCCCATTCGGACCGCAAGGAATCGGTCAATACACTACATGGCGTGATTTCATATGCGCGATTGCTGATCCCCATGTGTATCACTGGCAAACTGTGATGGACGACACCGTCAGTGCGTCCGTCGCGCAGGCTCTCGATGAGCTGATGCTTTGGGCCGAGGACTGCCCCGAAGTCCGGCACCTCGTGCACGCGGATTTCGGCTCCAACAATGTCCTGACGGACAATGGCCGCATAACAGCGGTCATTGACTGGAGCGAGGCGATGTTCGGGGATTCCCAATACGAGGTCGCCAACATCTTCTTCTGGAGGCCGTGGTTGGCTTGTATGGAGCAGCAGACGCGCTACTTCGAGCGGAGGCATCCGGAGCTTGCAGGATCGCCGCGGCTCCGGGCGTATATGCTCCGCATTGGTCTTGACCAACTCTATCAGAGCTTGGTTGACGGCAATTTCGATGATGCAGCTTGGGCGCAGGGTCGATGCGACGCAATCGTCCGATCCGGAGCCGGGACTGTCGGGCGTACACAAATCGCCCGCAGAAGCGCGGCCGTCTGGACCGATGGCTGTGTAGAAGTACTCGCCGATAGTGGAAACCGACGCCCCAGCACTCGTCCGAGGGCAAAGGAATAGCACGTGCTACGAGATTTCGATTCCACCGCCGCCTTCTATGAAAGGTTGGGCTTCGGAATCGTTTTCCGGGACGCCGGCTGGATGATCCTCCAGCGCGGGGATCTCATGCTGGAGTTCTTCGCCCACCCCAACTTGTTTATTGCAGCTTATAATGGTTACAAATAAAGCAATAGCATCACAAATTTCACAAATAAAGCATTTTTTTCACTGCATTCTAGTTGTGGTTTGTCCAAACTCATCAATGTATCTTATCATGTCTGTATACCGTCGACCTCTAGCTAGAGCTTGGCGTAATCATGGTCATTACCAATGCTTAATCAGTGAGGCACCTATCTCAGCGATCTGTCTATTTCGTTCATCCATAGTTGCCTGACTCCCCGTCGTGTAGATAACTACGATACGGGAGGGCTTACCATCTGGCCCCAGCGCTGCGATGATACCGCGAGAACCACGCTCACCGGCTCCGGATTTATCAGCAATAAACCAGCCAGCCGGAAGGGCCGAGCGCAGAAGTGGTCCTGCAACTTTATCCGCCTCCATCCAGTCTATTAATTGTTGCCGGGAAGCTAGAGTAAGTAGTTCGCCAGTTAATAGTTTGCGCAACGTTGTTGCCATCGCTACAGGCATCGTGGTGTCACGCTCGTCGTTTGGTATGGCTTCATTCAGCTCCGGTTCCCAACGATCAAGGCGAGTTACATGATCCCCCATGTTGTGCAAAAAAGCGGTTAGCTCCTTCGGTCCTCCGATCGTTGTCAGAAGTAAGTTGGCCGCAGTGTTATCACTCATGGTTATGGCAGCACTGCATAATTCTCTTACTGTCATGCCATCCGTAAGATGCTTTTCTGTGACTGGTGAGTACTCAACCAAGTCATTCTGAGAATAGTGTATGCGGCGACCGAGTTGCTCTTGCCCGGCGTCAATACGGGATAATACCGCGCCACATAGCAGAACTTTAAAAGTGCTCATCATTGGAAAACGTTCTTCGGGGCGAAAACTCTCAAGGATCTTACCGCTGTTGAGATCCAGTTCGATGTAACCCACTCGTGCACCCAACTGATCTTCAGCATCTTTTACTTTCACCAGCGTTTCTGGGTGAGCAAAAACAGGAAGGCAAAATGCCGCAAAAAAGGGAATAAGGGCGACACGGAAATGTTGAATACTCATATTCTTCCTTTTTCAATATTATTGAAGCATTTATCAGGGTTATTGTCTCATGAGCGGATACATATTTGAATGTATTTAGAAAAATAAACAAATAGGGGTCAGTGTTACAACCAATTAACCAATTCTGAACATTATCGCGAGCCCATTTATACCTGAATATGGCTCATAACACCCCTTG'
				bbType = 'TALEN'
			assembled = start + final + end
			response['Content-Disposition'] = 'attachment; filename= %s %s.gb' % (bbType, seq_in)
			positions = []
			for n in range(10,len(assembled),10):
				positions.append(n)
			slices = []
			for n in positions:
				current_slice = assembled[n-10:n]
				slices.append(current_slice)
			final = positions[-1]
			final_slice = assembled[final:]
			slices.append(final_slice)
			lines = []
			for n in range(0,len(assembled),60):
				lines.append(n+1)
			line_breaks = range(6,len(slices),6)
			all_lines = []
			for n in line_breaks:
				current_line = slices[n-6:n]
				all_lines.append(current_line)
			final = line_breaks[-1]
			last_line = slices[final:]
			all_lines.append(last_line)
			breaks = ''
			for n in range(len(lines)):
				current = ''
				number_length = len(str(lines[n]))
				spaces = 9-number_length
				for a in range(spaces):
					current = current + ' '
				current = current + str(lines[n])
				for i in range(len(all_lines[n])):
					current = current + ' ' + str(all_lines[n][i])
				current = current + '\r\n'
				breaks = breaks + current
			if backbone == "TALE":
				repeats = len(seq_in) - 2
				repeat_length = repeats*102
				total_len = len(assembled)
				repeat_start = 2840
				repeat_end = 2840 + repeat_length - 1
				half_start = repeat_end + 1
				half_end = half_start + 59
				c_start = half_end + 1
				c_end = c_start + 533
				nls_start = c_end + 4
				nls_end = nls_start + 32
				vp64_start = nls_end + 1
				vp64_end = vp64_start + 170
				A_start = vp64_end + 7
				A_end = A_start + 62
				egfp_start = A_end + 1
				egfp_end = egfp_start + 713
				hygro_start = egfp_end + 636
				hygro_end = hygro_start + 1025
				sv_start = hygro_end + 128
				sv_end = sv_start + 130
				amp_start = sv_end + 55
				amp_end = amp_start + 848
				genbank= 'LOCUS       %s        %s bp    DNA   circular            09-AUG-2011\r\n\
45131_CLONED \r\n\
FEATURES             Location/Qualifiers\r\n\
     misc_feature    2..805\r\n\
                     /label=pUC_ori\r\n\
     misc_feature    1454..2054\r\n\
                     /label=CMV Promoter\r\n\
     misc_feature    2120..2839\r\n\
                     /label=TAL N-Term\r\n\
     misc_feature    %s..%s\r\n\
                     /label=Target Repeats\r\n\
     misc_feature    %s..%s\r\n\
                     /label=0.5 Repeat\r\n\
     misc_feature    %s..%s\r\n\
                     /label=TAL C-term\r\n\
     misc_feature    %s..%s\r\n\
                     /label=NLS (SPKKKRKVEA)\r\n\
     misc_feature    %s..%s\r\n\
                     /label=VP64 AD\r\n\
     misc_feature    %s..%s\r\n\
                     /label=2A\r\n\
     misc_feature    %s..%s\r\n\
                     /label=EGFP\r\n\
     misc_feature    %s..%s\r\n\
                     /label=hygromycin\r\n\
     misc_feature    %s..%s\r\n\
                     /label=SV40 pA Signal\r\n\
     misc_feature    complement(%s..%s)\r\n\
                     /label=Ampicillin\r\n\
ORIGIN\r\n' % (seq_in,total_len,repeat_start,repeat_end,half_start,half_end,c_start,c_end,nls_start,nls_end,vp64_start,vp64_end,A_start,A_end, egfp_start, egfp_end,hygro_start,hygro_end,sv_start,sv_end,amp_start,amp_end)+breaks+'//'
			elif backbone == "TALEN":
				repeats = len(seq_in) - 2
				repeat_length = repeats*102
				total_len = len(assembled)
				repeat_start = 2641
				repeat_end = 2641 + repeat_length - 1
				half_start = repeat_end + 1
				half_end = half_start + 59
				c_start = half_end + 1
				c_end = c_start + 188
				fok1_start = c_end + 1
				fok1_end = fok1_start + 602
				sv_ori_start = fok1_end + 238
				sv_ori_end = sv_ori_start + 343
				hygro_start = sv_ori_end + 46
				hygro_end = hygro_start + 1025
				sv_PA_start = hygro_end + 128
				sv_PA_end = sv_PA_start + 130
				amp_start = sv_PA_end + 55
				amp_end = amp_start + 848


				genbank= 'LOCUS       %s       %s bp    DNA     circular     \r\n\
45131_CLONED \r\n\
FEATURES             Location/Qualifiers\r\n\
     misc_feature    2..805\r\n\
                     /label=pUC_ori\r\n\
     misc_feature    1454..2054\r\n\
                     /label=CMV Promoter\r\n\
     misc_feature    2113..2232\r\n\
                     /label=NLS    \r\n\
     misc_feature    2233..2640\r\n\
                     /label=TAL N-Term\r\n\
     misc_feature    %s..%s\r\n\
                     /label=Target Repeats\r\n\
     misc_feature    %s..%s\r\n\
                     /label=0.5 Repeat\r\n\
     misc_feature    %s..%s\r\n\
                     /label=TAL C-term\r\n\
     misc_feature    %s..%s\r\n\
                     /label=Fok1\r\n\
     misc_feature    %s..%s\r\n\
                     /label=SV40 ori\r\n\
     misc_feature    %s..%s\r\n\
                     /label=hygromycin\r\n\
     misc_feature    %s..%s\r\n\
                     /label=SV40 pA Signal\r\n\
     misc_feature    complement(%s..%s)\r\n\
                     /label=Ampicillin\r\n\
ORIGIN\r\n' % (seq_in,total_len,repeat_start,repeat_end,half_start,half_end,c_start,c_end,fok1_start,fok1_end,sv_ori_start,sv_ori_end,hygro_start,hygro_end,sv_PA_start,sv_PA_end,amp_start,amp_end)+breaks+'//'
			response.write(genbank)
			return response
		else: 
			if backbone == "TALE":
				start = 'ATGTCGCGGACCCGGCTCCCTTCCCCACCCGCACCCAGCCCAGCGTTTTCGGCCGACTCGTTCTCAGACCTGCTTAGGCAGTTCGACCCCTCACTGTTTAACACATCGTTGTTCGACTCCCTTCCTCCGTTTGGGGCGCACCATACGGAGGCGGCCACCGGGGAGTGGGATGAGGTGCAGTCGGGATTGAGAGCTGCGGATGCACCACCCCCAACCATGCGGGTGGCCGTCACCGCTGCCCGACCGCCGAGGGCGAAGCCCGCACCAAGGCGGAGGGCAGCGCAACCGTCCGACGCAAGCCCCGCAGCGCAAGTAGATTTGAGAACTTTGGGATATTCACAGCAGCAGCAGGAAAAGATCAAGCCCAAAGTGAGGTCGACAGTCGCGCAGCATCACGAAGCGCTGGTGGGTCATGGGTTTACACATGCCCACATCGTAGCCTTGTCGCAGCACCCTGCAGCCCTTGGCACGGTCGCCGTCAAGTACCAGGACATGATTGCGGCGTTGCCGGAAGCCACACATGAGGCGATCGTCGGTGTGGGGAAACAGTGGAGCGGAGCCCGAGCGCTTGAGGCCCTGTTGACGGTCGCGGGAGAGCTGAGAGGGCCTCCCCTTCAGCTGGACACGGG'
				end = 'CGGACCCCGCGCTGGCCGCACTCACTAATGATCATCTTGTAGCGCTGGCCTGCCTCGGCGGACGACCCGCCTTGGATGCGGTGAAGAAGGGGCTCCCGCACGCGCCTGCATTGATTAAGCGGACCAACAGAAGGATTCCCGAGAGGACATCACATCGAGTGGCAGATCACGCGCAAGTGGTCCGCGTGCTCGGATTCTTCCAGTGTCACTCCCACCCCGCACAAGCGTTCGATGACGCCATGACTCAATTTGGTATGTCGAGACACGGACTGCTGCAGCTCTTTCGTAGAGTCGGTGTCACAGAACTCGAGGCCCGCTCGGGCACACTGCCTCCCGCCTCCCAGCGGTGGGACAGGATTCTCCAAGCGAGCGGTATGAAACGCGCGAAGCCTTCACCTACGTCAACTCAGACACCTGACCAGGCGAGCCTTCATGCGTTCGCAGACTCGCTGGAGAGGGATTTGGACGCGCCCTCGCCCATGCATGAAGGGGACCAAACTCGCGCGTCAGCTAGCCCCAAGAAGAAGAGAAAGGTGGAGGCCAGCGGTTCCGGACGGGCTGACGCATTGGACGATTTTGATCTGGATATGCTGGGAAGTGACGCCCTCGATGATTTTGACCTTGACATGCTTGGTTCGGATGCCCTTGATGACTTTGACCTCGACATGCTCGGCAGTGACGCCCTTGATGATTTCGACCTGGACATGCTGATTAACTCTAGAGGCAGTGGAGAGGGCAGAGGAAGTCTGCTAACATGCGGTGACGTCGAGGAGAATCCTGGCCCAGTGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGTGCCCATCCTGGTCGAGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCTGACCCTGAAGTTCATCTGCACCACCGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCCTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCCGACCACATGAAGCAGCACGACTTCTTCAAGTCCGCCATGCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGGCAACTACAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACTACAACAGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAACACCCCCATCGGCGACGGCCCCGTGCTGCTGCCCGACAACCACTACCTGAGCACCCAGTCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGCCGGGATCACTCTCGGCATGGACGAGCTGTACAAGTAA'
			elif backbone == "TALEN":
				start = 'ATGGACTATAAGGACCACGACGGAGACTACAAGGATCATGATATTGATTACAAAGACGATGACGATAAGATGGCCCCAAAGAAGAAGCGGAAGGTCGGTATCCACGGAGTCCCAGCAGCCGTAGATTTGAGAACTTTGGGATATTCACAGCAGCAGCAGGAAAAGATCAAGCCCAAAGTGAGGTCGACAGTCGCGCAGCATCACGAAGCGCTGGTGGGTCATGGGTTTACACATGCCCACATCGTAGCCTTGTCGCAGCACCCTGCAGCCCTTGGCACGGTCGCCGTCAAGTACCAGGACATGATTGCGGCGTTGCCGGAAGCCACACATGAGGCGATCGTCGGTGTGGGGAAACAGTGGAGCGGAGCCCGAGCGCTTGAGGCCCTGTTGACGGTCGCGGGAGAGCTGAGAGGGCCTCCCCTTCAGCTGGACACGGG'
				end = 'CGGACCCCGCGCTGGCCGCACTCACTAATGATCATCTTGTAGCGCTGGCCTGCCTCGGCGGACGACCCGCCTTGGATGCGGTGAAGAAGGGGCTCCCGCACGCGCCTGCATTGATTAAGCGGACCAACAGAAGGATTCCCGAGAGGACATCACATCGAGTGGCAGGTTCCCAACTCGTGAAGAGTGAACTTGAGGAGAAAAAGTCGGAGCTGCGGCACAAATTGAAATACGTACCGCATGAATACATCGAACTTATCGAAATTGCTAGGAACTCGACTCAAGACAGAATCCTTGAGATGAAGGTAATGGAGTTCTTTATGAAGGTTTATGGATACCGAGGGAAGCATCTCGGTGGATCACGAAAACCCGACGGAGCAATCTATACGGTGGGGAGCCCGATTGATTACGGAGTGATCGTCGACACGAAAGCCTACAGCGGTGGGTACAATCTTCCCATCGGGCAGGCAGATGAGATGCAACGTTATGTCGAAGAAAATCAGACCAGGAACAAACACATCAATCCAAATGAGTGGTGGAAAGTGTATCCTTCATCAGTGACCGAGTTTAAGTTTTTGTTTGTCTCTGGGCATTTCAAAGGCAACTATAAGGCCCAGCTCACACGGTTGAATCACATTACGAACTGCAATGGTGCGGTTTTGTCCGTAGAGGAACTGCTCATTGGTGGAGAAATGATCAAAGCGGGAACTCTGACACTGGAAGAAGTCAGACGCAAGTTTAACAATGGCGAGATCAATTTCCGCTCATAA'
			assembled = start + final + end
			if backbone == "TALE":
				bb = "TALE-TF"
			if backbone == "TALEN":
				bb = "TALEN"
			fasta = '> ORF for %s targeting "%s"' % (bb,seq_in) + '\n'
			output = fasta + assembled
			if "align" in request.POST:
				return render_to_response('tal_align.html',{'ref':output}, context_instance=RequestContext(request))
			elif "assemble" in request.POST:
				return render_to_response('tal_tools.html',{'seq':output,'seq_in':seq_in}, context_instance=RequestContext(request))

		
	if "align" in request.POST:
		return render_to_response('tal_align.html',context_instance=RequestContext(request))
	elif "align" not in request.POST:
		errors.append('Please enter a target sequence.')
		return render_to_response('tal_tools.html',{'errors':errors},context_instance=RequestContext(request))
	

def reverse_complement(seq):
	rev = seq[::-1]
	rev = list(rev)
	for n in range(len(rev)):
		c = rev[n]
		if c == "A":
			rev[n] = "T"
		elif c == "T":
			rev[n] = "A"
		elif c == "G":
			rev[n] = "C"
		elif c == "C":
			rev[n] = "G"
	reverse = ''
	for n in rev:
		reverse = reverse + n
	return reverse


# Deleted a bunch of code that looked like non-working alignment stuff
